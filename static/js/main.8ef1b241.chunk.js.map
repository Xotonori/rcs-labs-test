{"version":3,"sources":["api/api.ts","redux/reducer.ts","redux/store.ts","components/TreeDataMenu/TreeDataMenu.tsx","components/Preloader/Preloader.tsx","App.tsx","index.tsx","components/TreeDataMenu/TreeDataMenu.module.scss","components/Preloader/Preloader.module.scss"],"names":["instance","axios","create","baseURL","api","get","then","res","data","SET_TREE_DATA","initialState","treeData","isFetching","actions","type","rootReducer","combineReducers","Reducer","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","TreeDataMenu","memo","useSelector","useState","theme","setTheme","current","setCurrent","SubMenu","Menu","className","classes","checked","onChange","value","checkedChildren","unCheckedChildren","Switch","onClick","e","key","selectedKeys","defaultOpenKeys","mode","length","buildTreeData","treeItem","map","item","index","children","id","title","Item","Preloader","spitWrap","Spin","App","dispatch","useDispatch","useEffect","a","treeDataArray","Object","values","result","parent","filter","child","parent_id","sort","b","srt","mainParent","console","log","message","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8ef1b241.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {TreeDataItemType} from \"../utils/Types/treeDataTypes\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://rcslabs.ru/locations.json'\r\n});\r\n\r\nexport const api = {\r\n    getTreeData: () => (\r\n        instance.get<ResponseType>(``)\r\n            .then(res => res.data)\r\n    )\r\n};\r\n\r\n//Response Types\r\ntype ResponseType = {\r\n    [key: number]: TreeDataItemType\r\n};\r\n\r\n\r\n\r\n\r\n","import {ThunkAction} from \"redux-thunk\"\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {api} from \"../api/api\";\r\nimport {TreeDataType} from \"../utils/Types/treeDataTypes\";\r\n\r\nconst SET_TREE_DATA = './recs-labs-test/SET_TREE_DATA'\r\nconst IS_FETCHING_SUCCESS = './recs-labs-test/IS_FETCHING_SUCCESS'\r\n\r\nlet initialState = {\r\n    treeData: [] as TreeDataType,\r\n    isFetching: false\r\n}\r\n\r\n//Reducers\r\nexport const Reducer = (state: InitialStateType = initialState, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case SET_TREE_DATA: {\r\n            return {\r\n                ...state,\r\n                treeData: [...action.treeData]\r\n            }\r\n        }\r\n        case IS_FETCHING_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nconst actions = {\r\n    setTreeDataSuccess: (treeData: TreeDataType) => ({type: SET_TREE_DATA, treeData} as const),\r\n    isFetchingSuccess: (isFetching: boolean) => ({type: IS_FETCHING_SUCCESS, isFetching} as const),\r\n}\r\n\r\n//Thunks\r\nexport const getTreeDataThunk = (): ThunkType => async (dispatch) => {\r\n    await dispatch(actions.isFetchingSuccess(true));\r\n    try {\r\n        const treeData = await api.getTreeData();\r\n        const treeDataArray = Object.values(treeData);\r\n\r\n        const result = treeDataArray.map((parent) => {\r\n            parent.children = treeDataArray.filter((child) => {\r\n                //Заполняем дочерними элементами массив children\r\n                return child.parent_id === parent.id;\r\n            }).sort((a, b) => {\r\n                //Сортируем дочерние элементы\r\n                return (a.srt !== b.srt) ? (a.srt > b.srt) ? 1 : -1 : 0;\r\n            })\r\n            return parent;\r\n        })\r\n            .filter((mainParent) => {\r\n                //Возвращаем только главные элементы\r\n                return mainParent.parent_id === null;\r\n            });\r\n\r\n        console.log(result)\r\n        await dispatch(actions.setTreeDataSuccess(result));\r\n    } catch (e) {\r\n        console.log(e.message);\r\n    }\r\n    await dispatch(actions.isFetchingSuccess(false));\r\n}\r\n\r\n//Types\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, {}, ActionTypes>\r\ntype InitialStateType = typeof initialState\r\ntype ActionTypes = InferActionTypes<typeof actions>","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {Reducer} from \"./reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    Reducer\r\n});\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nexport let store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n\r\n//Types\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\nexport type InferActionTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never","import React, {FC, memo, useState} from 'react'\r\nimport classes from \"./TreeDataMenu.module.scss\";\r\nimport 'antd/dist/antd.css';\r\nimport {Switch, Menu} from \"antd\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {TreeDataType} from \"../../utils/Types/treeDataTypes\";\r\n\r\nexport const TreeDataMenu: FC = memo(() => {\r\n\r\n    const {Reducer: {treeData}} = useSelector((state: AppStateType) => state);\r\n    const [theme, setTheme] = useState('dark');\r\n    const [current, setCurrent] = useState('1');\r\n    const {SubMenu} = Menu;\r\n\r\n    const changeTheme = (value: boolean) => {\r\n        value ? setTheme('dark') : setTheme('light');\r\n    };\r\n\r\n    const handleClick = (e: any) => {\r\n        setCurrent(e.key);\r\n    };\r\n\r\n    const buildTreeData = (treeItem: TreeDataType) => (\r\n        //Формируем html дерево с помощью библиотеки AntDesign\r\n        treeItem.map((item, index) => (\r\n            item.children?.length !== 0 ?\r\n                <SubMenu key={`${item.id}`} title={item.title}>\r\n                    {buildTreeData(item.children as TreeDataType)}\r\n                </SubMenu>\r\n                : <Menu.Item key={`${item.id}${index}`}>{item.title}</Menu.Item>\r\n        )));\r\n\r\n    return (\r\n        <div className={classes.TreeDataMenu}>\r\n            <Switch\r\n                checked={theme === 'dark'}\r\n                onChange={changeTheme}\r\n                checkedChildren=\"Dark\"\r\n                unCheckedChildren=\"Light\"\r\n                className={classes.Switch}\r\n            />\r\n            <Menu\r\n                theme={theme as (\"dark\" | \"light\")}\r\n                onClick={handleClick}\r\n                selectedKeys={[current]}\r\n                defaultOpenKeys={['52']}\r\n                mode=\"inline\"\r\n                className={classes.Menu}\r\n            >\r\n                {treeData.length !== 0 && buildTreeData(treeData)}\r\n            </Menu>\r\n        </div>\r\n    )\r\n});","import React from \"react\";\r\nimport {Spin} from \"antd\";\r\nimport classes from \"./Preloader.module.scss\"\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.spitWrap}>\r\n            <Spin className={classes.Spin}/>\r\n        </div>\r\n    )\r\n}","import React, {FC, memo, useEffect} from 'react';\nimport './App.scss';\nimport {TreeDataMenu} from \"./components/TreeDataMenu/TreeDataMenu\";\nimport {Preloader} from \"./components/Preloader/Preloader\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {getTreeDataThunk} from \"./redux/reducer\";\n\nexport const App: FC = memo(() => {\n\n    const dispatch = useDispatch();\n    const {Reducer: {isFetching}} = useSelector((state: AppStateType) => state);\n\n    useEffect(() => {\n        dispatch(getTreeDataThunk());\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {isFetching ? <Preloader/> : <TreeDataMenu/>}\n        </div>\n    )\n})\n\n","import React from \"react\";\nimport {HashRouter} from \"react-router-dom\";\nimport {store} from \"./redux/store\";\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TreeDataMenu\":\"TreeDataMenu_TreeDataMenu__OFGOj\",\"Menu\":\"TreeDataMenu_Menu__3iq3o\",\"Switch\":\"TreeDataMenu_Switch__7vPcM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spitWrap\":\"Preloader_spitWrap__tdVHO\",\"Spin\":\"Preloader_Spin__21CvI\"};"],"sourceRoot":""}